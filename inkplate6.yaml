# Status Display
# Siehe https://github.com/hanspeda/esphome_homeassistant_display/blob/aa3692f4f687b46d6d0564f673cf51bfa3225d60/esphome-web-399610.yaml

esphome:
  name: inkplate
  includes:
    - functions.h

esp32:
  board: esp-wrover-kit

logger:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap: {}

captive_portal:

ota:
  platform: esphome

api:

text_sensor:
  - platform: homeassistant
    id: temperatur_boiler
    entity_id: sensor.boiler
    internal: true
  - platform: homeassistant
    id: strom_preis
    entity_id: sensor.pyramoos_12_strompreis
    internal: true
  - platform: homeassistant
    id: temperatur_nord
    entity_id: sensor.tempaussennord_temperature
    internal: true
  - platform: homeassistant
    id: temperatur_garage
    entity_id: sensor.garagetemp1
    internal: true
  - platform: homeassistant
    id: soc_ladewagen
    entity_id: sensor.ladewagensoc
    internal: true
  - platform: homeassistant
    id: soc_ioniq
    entity_id: sensor.evnotify_charge_status
    internal: true
  - platform: homeassistant
    id: soc_tesla
    entity_id: sensor.teslasoc
    internal: true
  - platform: homeassistant
    id: soc_niu
    entity_id: sensor.niusoc
    internal: true
  - platform: homeassistant
    id: soc_haus
    entity_id: sensor.sonnenbatterie_99688_state_battery_percentage_user
    internal: true
  - platform: homeassistant
    id: inkplate_battery_voltage
    entity_id: sensor.inkplate_battery_voltage
    internal: true


    on_value: # Actions to perform once data for the last sensor has been received
      then:
        - script.execute: all_data_received

script:
  - id: all_data_received
    then:
      - component.update: inkplate_display
      # - script.execute: enter_sleep

deep_sleep:
  run_duration: 30s
  # run_duration: 180s
  sleep_duration: 10min


switch:
  - platform: restart
    name: "Inkplate Reboot"
    id: reboot

  - platform: gpio
    id: battery_read_mosfet
    pin:
      mcp23xxx: mcp23017_hub
      number: 9
      inverted: true

  - platform: template
    name: "Inkplate Greyscale mode"
    lambda: return id(inkplate_display).get_greyscale();
    turn_on_action:
      - lambda: id(inkplate_display).set_greyscale(true);
    turn_off_action:
      - lambda: id(inkplate_display).set_greyscale(false);

  - platform: template
    name: "Inkplate Partial Updating"
    lambda: return id(inkplate_display).get_partial_updating();
    turn_on_action:
      - lambda: id(inkplate_display).set_partial_updating(true);
    turn_off_action:
      - lambda: id(inkplate_display).set_partial_updating(false);

sensor:
  - platform: adc
    id: battery_voltage
    update_interval: never
    attenuation: 11db
    pin: 35
  - platform: template
    name: "Inkplate Battery Voltage"
    device_class: VOLTAGE
    lambda: |-
      id(battery_read_mosfet).turn_on();
      delay(1);
      float adc = id(battery_voltage).sample();
      id(battery_read_mosfet).turn_off();
      return adc;
    filters:
      - multiply: 2

i2c:

mcp23017:
  - id: mcp23017_hub
    address: 0x20

binary_sensor:
  - platform: status
    name: "Inkplate Status"
    id: system_status

  - platform: gpio
    name: "Inkplate Touch Pad 1"
    pin:
      mcp23xxx: mcp23017_hub
      number: 10
  - platform: gpio
    name: "Inkplate Touch Pad 2"
    pin:
      mcp23xxx: mcp23017_hub
      number: 11
  - platform: gpio
    name: "Inkplate Touch Pad 3"
    pin:
      mcp23xxx: mcp23017_hub
      number: 12

time:
  - platform: sntp
    id: esptime

font:
  - file: "fonts/Arial.ttf"
    id: helvetica_96
    size: 96
  - file: "fonts/Arial.ttf"
    id: helvetica_48
    size: 48
  - file: "fonts/Arial.ttf"
    id: helvetica_24
    size: 24
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: font_icons
    size: 65
    glyphs:
    - "\U000F072E" # Down
    - "\U000F0737" # Up


display:
- platform: inkplate6
  id: inkplate_display
  greyscale: false
  partial_updating: false
  update_interval: never

  ckv_pin: 32
  sph_pin: 33
  gmod_pin:
    mcp23xxx: mcp23017_hub
    number: 1
  gpio0_enable_pin:
    mcp23xxx: mcp23017_hub
    number: 8
  oe_pin:
    mcp23xxx: mcp23017_hub
    number: 0
  spv_pin:
    mcp23xxx: mcp23017_hub
    number: 2
  powerup_pin:
    mcp23xxx: mcp23017_hub
    number: 4
  wakeup_pin:
    mcp23xxx: mcp23017_hub
    number: 3
  vcom_pin:
    mcp23xxx: mcp23017_hub
    number: 5

  lambda: |-
    it.fill(COLOR_ON);
    const int x_label = 170;
    const int x_value = 175;
    const int y_label = 90;
    const int y_value = 120;
    const int x2_label = 520;
    const int x2_value = x2_label+5;
    int line_spacing = 113;
    int row = 0;

    it.print(x_label, y_label+(line_spacing*row), id(helvetica_48), COLOR_OFF, TextAlign::BOTTOM_RIGHT, "Tesla:");
    // it.printf(x_value, y_value+(line_spacing*row)-20, id(font_icons), COLOR_OFF, TextAlign::BOTTOM_LEFT, "%s", trendIcon(id(tesla_increasing).state, id(tesla_falling).state));
    it.printf(x_value+60, y_value+(line_spacing*row++), id(helvetica_96), COLOR_OFF, TextAlign::BOTTOM_LEFT, "%s", id(soc_tesla).state.c_str());

    it.print(x_label, y_label+(line_spacing*row), id(helvetica_48), COLOR_OFF, TextAlign::BOTTOM_RIGHT, "Ioniq:");
    // it.printf(x_value, y_value+(line_spacing*row)-20, id(font_icons), COLOR_OFF, TextAlign::BOTTOM_LEFT, "%s", trendIcon(id(ioniq_increasing).state, id(ioniq_falling).state));
    it.printf(x_value+60, y_value+(line_spacing*row++), id(helvetica_96), COLOR_OFF, TextAlign::BOTTOM_LEFT, "%s", id(soc_ioniq).state.c_str());

    it.print(x_label, y_label+(line_spacing*row), id(helvetica_48), COLOR_OFF, TextAlign::BOTTOM_RIGHT, "Roller:");
    it.printf(x_value+60, y_value+(line_spacing*row++), id(helvetica_96), COLOR_OFF, TextAlign::BOTTOM_LEFT, "%s", id(soc_niu).state.c_str());


    it.print(x_label, y_label+(line_spacing*row), id(helvetica_48), COLOR_OFF, TextAlign::BOTTOM_RIGHT, "Ladew:");
    // it.printf(x_value, y_value+(line_spacing*row)-20, id(font_icons), COLOR_OFF, TextAlign::BOTTOM_LEFT, "%s", trendIcon(id(ladew_increasing).state, id(ladew_falling).state));
    it.printf(x_value+60, y_value+(line_spacing*row++), id(helvetica_96), COLOR_OFF, TextAlign::BOTTOM_LEFT, "%s", id(soc_ladewagen).state.c_str());

    it.print(x_label, y_label+(line_spacing*row), id(helvetica_48), COLOR_OFF, TextAlign::BOTTOM_RIGHT, "Haus:");
    // it.printf(x_value, y_value+(line_spacing*row)-20, id(font_icons), COLOR_OFF, TextAlign::BOTTOM_LEFT, "%s", trendIcon(id(haus_increasing).state, id(haus_falling).state));
    it.printf(x_value+60, y_value+(line_spacing*row++), id(helvetica_96), COLOR_OFF, TextAlign::BOTTOM_LEFT, "%s", id(soc_haus).state.c_str());

    it.rectangle(410, 5, 3, 590, COLOR_OFF);

    row = 0;
    line_spacing = 75;

    it.print(x2_label, y_label+(line_spacing*row)-15, id(helvetica_24), COLOR_OFF, TextAlign::BOTTOM_RIGHT, "Garage:");
    it.printf(x2_value, y_label+(line_spacing*row++), id(helvetica_48), COLOR_OFF, TextAlign::BOTTOM_LEFT, "%s°C", id(temperatur_garage).state.c_str());
    it.print(x2_label, y_label+(line_spacing*row)-15, id(helvetica_24), COLOR_OFF, TextAlign::BOTTOM_RIGHT, "Norden:");
    it.printf(x2_value, y_label+(line_spacing*row++), id(helvetica_48), COLOR_OFF, TextAlign::BOTTOM_LEFT, "%s°C", id(temperatur_nord).state.c_str());
    it.print(x2_label, y_label+(line_spacing*row)-15, id(helvetica_24), COLOR_OFF, TextAlign::BOTTOM_RIGHT, "Boiler:");
    it.printf(x2_value, y_label+(line_spacing*row++), id(helvetica_48), COLOR_OFF, TextAlign::BOTTOM_LEFT, "%s°C", id(temperatur_boiler).state.c_str());
    row++;
    it.print(x2_label, y_label+(line_spacing*row)-15, id(helvetica_24), COLOR_OFF, TextAlign::BOTTOM_RIGHT, "Strom:");
    it.printf(x2_value, y_label+(line_spacing*row++), id(helvetica_48), COLOR_OFF, TextAlign::BOTTOM_LEFT, "%s EUR", id(strom_preis).state.c_str());

    it.strftime(800, 600, id(helvetica_96), COLOR_OFF, TextAlign::BOTTOM_RIGHT, "%H:%M", id(esptime).now());

    it.printf(800, 0, id(helvetica_24), COLOR_OFF, TextAlign::TOP_RIGHT, "%sV", id(inkplate_battery_voltage).state.c_str());
