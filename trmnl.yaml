# See: https://github.com/jesserockz/esphome-trmnl/blob/main/trmnl.yaml
#
esphome:
  name: trmnl
  friendly_name: TRMNL
  # Automatically add the mac address to the name
  # so you can use a single firmware for all devices
  #name_add_mac_suffix: true

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino
    #type: esp-idf

# To be able to get logs from the device via serial and api.
logger:

# API is a requirement of the dashboard import.
api:
  reboot_timeout: 0s
  encryption:
    key: !secret api_encryption_key

# OTA is required for Over-the-Air updating
ota:
  - platform: esphome

wifi:
  networks:
  - ssid: WLAN
    password: !secret wifi_password

  # Set up a wifi access point using the device name above
  ap:

# In combination with the `ap` this allows the user
# to provision wifi credentials to the device.
captive_portal:

font:
  - id: roboto_14
    file: gfonts://Roboto
    size: 14
  - id: roboto_32
    file: gfonts://Roboto
    size: 32
  - id: roboto_48
    file: gfonts://Roboto
    size: 48

spi:
  mosi_pin: GPIO8
  clk_pin: GPIO7

time:
  - platform: sntp
    id: esptime

sensor:
  - platform: homeassistant
    id: strom_preis
    entity_id: sensor.pyramoos_12_strompreis
    internal: true
    state_class: "total" 
    unit_of_measurement: "€"
  - platform: homeassistant
    id: tageskosten
    entity_id: sensor.tibber_pulse_pyramoos_12_kumulierte_kosten
    internal: true
    state_class: "total" 
    unit_of_measurement: "€"
  - platform: homeassistant
    id: monatskosten
    entity_id: sensor.pyramoos_12_monatliche_kosten
    internal: true
    state_class: "total" 
    unit_of_measurement: "€"
  - platform: adc
    name: Battery Voltage
    id: battery_voltage
    pin: GPIO3
    attenuation: 12db
    samples: 128
    filters:
      - multiply: 2.0

text_sensor:
  - platform: homeassistant
    id: soc_felicity
    entity_id: sensor.felicity_ess_bat1_soc
    internal: true
  - platform: homeassistant
    id: soc_ladewagen
    entity_id: sensor.ladewagensoc
    internal: true
  - platform: homeassistant
    id: soc_ioniq
    entity_id: sensor.evnotify_charge_status
    internal: true
  - platform: homeassistant
    id: soc_tesla
    entity_id: sensor.teslasoc
    internal: true
  #  - platform: homeassistant
  #  id: soc_niu
  #  entity_id: sensor.niusoc
  #  internal: true
  - platform: homeassistant
    id: soc_haus
    entity_id: sensor.sonnenbatterie_99688_state_battery_percentage_user
    internal: true

    on_value: # Actions to perform once data for the last sensor has been received
      then:
        - script.execute: all_data_received

script:
  - id: all_data_received
    then:
      - component.update: trmnl_display

display:
  platform: waveshare_epaper
  id: trmnl_display
  cs_pin: GPIO6
  model: 7.50inv2
  update_interval: never
  # update_interval: 30s
  dc_pin: GPIO5
  reset_pin: GPIO10
  busy_pin:
    number: GPIO4
    inverted: true
  pages:
    - id: main_page
      lambda: |-
        it.printf(10,50, id(roboto_32), TextAlign::BOTTOM_LEFT, "Akkus: T:%s%% I:%s%% | H:%s%% F:%s%% L:%s%%",
            id(soc_tesla).state.c_str(),
            id(soc_ioniq).state.c_str(),
            id(soc_haus).state.c_str(),
            id(soc_felicity).state.c_str(),
            id(soc_ladewagen).state.c_str()
        );

        int x = 10;
        // Aktueller Strompreis
        it.filled_rectangle(x,70, 130, 80, COLOR_ON);
        it.printf(x+5,130, id(roboto_48), COLOR_OFF, TextAlign::BOTTOM_LEFT, "%.1f¢", id(strom_preis).state * 100);
        it.printf(x+5,148, id(roboto_14), COLOR_OFF, TextAlign::BOTTOM_LEFT, "kWh Preis");

        // Kumulierte Stromkosten des Tages
        x += 135;
        it.filled_rectangle(x,70, 130, 80, COLOR_ON);
        it.printf(x+5,130, id(roboto_48), COLOR_OFF, TextAlign::BOTTOM_LEFT, "%.2f€", id(tageskosten).state);
        it.printf(x+5,148, id(roboto_14), COLOR_OFF, TextAlign::BOTTOM_LEFT, "Tageskosten");

        // Kumulierte Stromkosten des Monats
        x += 135;
        it.filled_rectangle(x,70, 130, 80, COLOR_ON);
        it.printf(x+5,130, id(roboto_48), COLOR_OFF, TextAlign::BOTTOM_LEFT, "%.1f€", id(monatskosten).state);
        it.printf(x+5,148, id(roboto_14), COLOR_OFF, TextAlign::BOTTOM_LEFT, "Monatskosten");

        it.strftime(10, 470, id(roboto_14), TextAlign::BOTTOM_LEFT, "%H:%M", id(esptime).now());
        it.printf(790, 470, id(roboto_14), TextAlign::BOTTOM_RIGHT, "Battery: %.2fV", id(battery_voltage).state);

deep_sleep:
  run_duration: 40s
  # run_duration: 180s
  sleep_duration: 10min

binary_sensor:
  - platform: gpio
    name: Button
    id: back_button
    pin:
      number: GPIO9
      inverted: true

